name: QA
on:
  push:
    branches:
    - main
  pull_request:

env:
  goversion: '1.16'

jobs:
  quality:
    name: Code quality and mod files up to date
    runs-on: ubuntu-latest
    container: ubuntu:devel
    steps:
      # We install git before checkouting so that actions/checkout use the git command and persists .git/ thus
      - name: Install dependencies
        run: |
          rm /etc/dpkg/dpkg.cfg.d/*

          export DEBIAN_FRONTEND=noninteractive
          apt update
          apt full-upgrade -y
          apt install -y ca-certificates git gcc libsmbclient-dev
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.goversion }}
      - name: Code formatting
        run: |
          FMT=`go fmt ./...`
          echo "$FMT"
          [ -z "$FMT" ]
      - name: Go vet
        run: go vet ./...
        if: ${{ always() }}
      - name: Install static checker
        run: |
          go install honnef.co/go/tools/cmd/staticcheck
        if: ${{ always() }}
      - name: Staticcheck
        run: staticcheck ./...
        if: ${{ always() }}
      - name: Gosec Security Scanner
        run: |
          set -eu

          # Run manually here due to GOROOT issue.
          export PATH=$PATH:$(go env GOPATH)/bin
          go get github.com/securego/gosec/cmd/gosec
          gosec ./...
        if: ${{ always() }}
      - name: Module files are up to date
        run: |
          set -eu

          go mod tidy
          MODIFIED=`git status --porcelain go.sum go.mod`
          if [ -n "$MODIFIED" ]; then
              echo "ERROR: go module files aren't up to date:"
              git --no-pager diff go.mod go.sum
              exit 1
          fi
        if: ${{ always() }}
      - name: Building
        run: go build ./...
        if: ${{ always() }}

  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.goversion }}
      # We add a new user and execute under it for file permissions to be taken into account
      # as root can write in RO directories.
      - name: Install dependencies
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y ca-certificates gcc gettext libsmbclient-dev samba sudo dconf-cli python3-coverage libnss-wrapper
      - name: Authenticate to docker local registry and pull image with our token
        run: |
          set -eu

          echo "${{ github.token }}" | docker login https://docker.pkg.github.com -u ${GITHUB_ACTOR} --password-stdin
          docker pull docker.pkg.github.com/ubuntu/adsys/systemdaemons:0.1
      - name: Run tests
        run: |
          set -eu

          go test -coverpkg=./... -coverprofile=/tmp/coverage.txt.full -covermode=count ./...
          # Filter out test utilities and generated files
          grep -v -e "testutils" -e "pb.go:" "/tmp/coverage.txt.full" > "/tmp/coverage.txt"
      - name: Run tests (with race detector)
        run: go test -race ./...
      - name: Install curl for codecov
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y curl
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: /tmp/coverage.txt

  generators:
    name: Generated files are up to date
    runs-on: ubuntu-latest
    container: ubuntu:latest
    steps:
      # Add dependencies
      - name: Install dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt update
          apt install -y ca-certificates gcc protobuf-compiler gettext git libsmbclient-dev
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.goversion }}
      - name: Install go grpc protoc generator
        run: |
          set -eu

          go install google.golang.org/protobuf/cmd/protoc-gen-go \
            google.golang.org/grpc/cmd/protoc-gen-go-grpc
      - name: Check generated files
        run: |
          set -eu

          # Ignore mod file changes; doc/ and README.md and po files
          # Modules are handled in another check and aren't related to generator
          # po and README.md files will be automatically updated once master in master.
          git update-index --assume-unchanged go.* po/* doc/*.md README.md
          on_exit() {
              # Restore files
              git update-index --no-assume-unchanged go.* po/* doc/*.md README.md
          }
          trap on_exit EXIT INT QUIT ABRT PIPE TERM

          go generate ./...

          # Handle everything but po and assets files
          modified_files=`git status --porcelain --untracked-files=no`

          # Check generated files
          MODIFIED=""
          if [ -n "$modified_files" ]; then
              # Ignore assets modification time and protoc version.
              MODIFIED=`git difftool -y -x "diff -I 'modTime' -I '^//.*protoc.*v'"`
          fi

          if [ -n "$MODIFIED" ]; then
              echo "ERROR: 'go generate' modified files:"
              git --no-pager diff
              exit 1
          fi

#!/usr/bin/make -f
#export DH_VERBOSE = 1

export GOCACHE=$(shell mktemp -d /tmp/gocache-XXXX)

WIN_ARCHS := amd64 arm64
WIN_GOFLAGS := -ldflags=-X=github.com/ubuntu/adsys/internal/consts.Version=$(shell dpkg-parsechangelog -S Version) --mod=vendor
export GOFLAGS := $(WIN_GOFLAGS) -buildmode=pie

# PIE on Windows is only supported for amd64
ifeq ($(shell dpkg --print-architecture),amd64)
	WIN_GOFLAGS += -buildmode=pie
endif

# Only build adwatchd on supported architectures
ifneq ($(filter $(shell dpkg --print-architecture),$(WIN_ARCHS)),)
	WINDOWS_BUILD := 1
endif

# Copy in build directory all content to embed
export DH_GOLANG_INSTALL_ALL := 1

# Skip integration tests when building package: they need docker images
# Tests needing sudo will be skipped automatically
export ADSYS_SKIP_INTEGRATION_TESTS=1

# Do not run Rust tests from Golang, as they're run independently via
# dh-cargo, allowing integration with vendored deps, etc...
export ADSYS_SKIP_RUST_TESTS_IN_GOLANG=1

# The following definitions are necessary because of the manual steps
# we need to do to work around some issues with either dh-cargo,
# the wrapper, or cargo
include /usr/share/rustc/architecture.mk
CARGO := /usr/share/cargo/bin/cargo
ADSYS_MOUNT := internal/policies/mount/adsys_mount

# Needed for Rust vendored sources tracking
DH_CARGO_VENDORED_SOURCES := /usr/share/cargo/bin/dh-cargo-vendored-sources
export CARGO_VENDOR_DIR = vendor_rust

%:
	dh $@ --buildsystem=golang --with=golang,apport

override_dh_auto_clean:
	dh_auto_clean
	dh_auto_clean --buildsystem=cargo
	# Create the vendor directory when building the source package
	[ -d vendor/ ] || go mod vendor
	# system-deps crate includes an empty .a file which is filtered out when
	# building the source package and cargo gets confused when trying to verify
	# integrity. So we just put in an empty checksum file instead.
	if [ ! -d $(CARGO_VENDOR_DIR)/ ]; then \
		$(CARGO) vendor $(CARGO_VENDOR_DIR); \
		cp debian/cargo-checksum.json $(CARGO_VENDOR_DIR)/system-deps/.cargo-checksum.json; \
		[ ! -e $(DH_CARGO_VENDORED_SOURCES) ] || $(DH_CARGO_VENDORED_SOURCES); \
	fi
	# That last line above is to warn whoever's doing the packaging that they
	# need to update the Vendored-Sources field. The initial packaging work
	# didn't include said field since the vendoring is done on the fly.

override_dh_auto_configure:
	dh_auto_configure
	# Normally we keep the lockfile around when using vendored deps, except we
	# had to mess with the checksums of system-deps and so cargo complains.
	# That doesn't actually matter since dh-cargo configured cargo not to query
	# the network for deps, instead relying on the vendored ones.
	rm -f Cargo.lock
	# The following lines basically do the same thing as
	# `dh_auto_configure --buildsystem=cargo`
	# on Kinetic and above, but since we're supporting Jammy as well,
	# we need to do it manually. Note that we don't want to export CARGO_HOME
	# in the global debian/rules as it would interfere with the clean target
	[ ! -e $(DH_CARGO_VENDORED_SOURCES) ] || $(DH_CARGO_VENDORED_SOURCES)
	DEB_HOST_GNU_TYPE=$(DEB_HOST_GNU_TYPE) DEB_HOST_RUST_TYPE=$(DEB_HOST_RUST_TYPE) \
		CARGO_HOME=$(CURDIR)/debian/cargo_home DEB_CARGO_CRATE=adsys_$(shell dpkg-parsechangelog --show-field Version) \
		$(CARGO) prepare-debian $(CARGO_VENDOR_DIR)

override_dh_auto_build:
	# Build on linux only adsysd itself, and not generator or Windows binaries
	DH_GOLANG_BUILDPKG=github.com/ubuntu/adsys/cmd/adsysd dh_auto_build
	DEB_HOST_GNU_TYPE=$(DEB_HOST_GNU_TYPE) DEB_HOST_RUST_TYPE=$(DEB_HOST_RUST_TYPE) \
		CARGO_HOME=$(CURDIR)/debian/cargo_home $(CARGO) build --release --all

override_dh_auto_test:
	dh_auto_test --buildsystem=cargo -- test --all
	dh_auto_test

# Build the Windows executables for adwatchd where applicable
ifeq ($(WINDOWS_BUILD),1)
	GOFLAGS="$(WIN_GOFLAGS)" GOOS=windows DH_GOLANG_BUILDPKG=github.com/ubuntu/adsys/cmd/adwatchd dh_auto_build
endif

override_dh_auto_install:
	dh_auto_install -- --no-source

	# Currently doesn't work because of https://github.com/rust-lang/cargo/issues/4101
	# combined with a lack of flexibility in the cargo wrapper. That means we
	# have to do it manually (with the build split out in dh_auto_build for good
	# measure, even though dh-cargo does it all in the install step)
	# dh_auto_install --buildsystem=cargo
	cp target/$(DEB_HOST_RUST_TYPE)/release/adsys_mount debian/tmp/usr/bin

	# PAM configuration
	mkdir -p debian/tmp/usr/share/pam
	cp -a pam/pam-configs debian/tmp/usr/share

	# systemd services
	mkdir -p debian/tmp/lib/systemd/system debian/tmp/usr/lib/systemd/user
	cp -a systemd/*.mount debian/tmp/lib/systemd/system/
	cp -a systemd/*.service debian/tmp/lib/systemd/system/
	cp -a systemd/*.socket debian/tmp/lib/systemd/system/
	cp -a systemd/*.timer debian/tmp/lib/systemd/system/
	cp -a systemd/user/*.service debian/tmp/usr/lib/systemd/user/

# Separate windows binaries
ifeq ($(WINDOWS_BUILD),1)
	mkdir -p debian/tmp/usr/share/adsys/windows
	mv debian/tmp/usr/bin/windows_*/* debian/tmp/usr/share/adsys/windows
	rmdir debian/tmp/usr/bin/windows_*

	# Ship admx/adml for ubuntu
	cp -a policies/Ubuntu debian/tmp/usr/share/adsys/windows/policies
endif

	# Install in /sbin
	mv debian/tmp/usr/bin/ debian/tmp/sbin
	# Create adsysctl command
	ln -s adsysd debian/tmp/sbin/adsysctl
	# Run go generate to install assets, but donâ€™t regenerate them
	GENERATE_ONLY_INSTALL_TO_DESTDIR=$(CURDIR)/debian/tmp go generate -x -tags tools $(GOFLAGS) ./...
